# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# https://atom.io/docs/latest/using-atom-basic-customization#cson

'.source.html':
  'Base Template':
    'prefix': 'tmpl',
    'body': '''
    {% extends g.base_template %}
    {% block title %}${1:title}{% endblock %}

    {%- block header %}
    <a href="/mypage">Mypage„Å∏</a>
    {% endblock %}

    {% block body %}


    {% endblock %}
    '''
  '<%= %>':
    'prefix': 'utv'
    'body': '<%= ${1:value} %>'
  '<% if(){ %><% } %>':
    'prefix': 'utif'
    'body': '''
    <% if (${1:bool}) { %>
      $2
    <% } %>
    '''
  '<% _.each(list, function(){ %><% } %>':
    'prefix': 'utfor'
    'body': '''
    <% _.each(${1:list}, function($2){ %>
      $3
    <% }) %>
    '''
  '<% _.each(list, function(){ %><% } %>':
    'prefix': 'uteach'
    'body': '''
    <% _.each(${1:list}, function($2){ %>
      $3
    <% }) %>
    '''
'.source.python':
  'Function Definition':
    'prefix': 'def'
    'body': '''
    def ${1:fname}(${2:arg}):
        ${3:pass}
    $4
    '''
  'Initiator Function':
    'prefix': 'defi'
    'body': '''
    def __init__(self, ${1:arg}):
        ${2:pass}
    $3
    '''
  'Print Function':
    'prefix': 'print'
    'body': 'print($1)$2'
  '[Tyrus]Controller':
    'prefix': 'con'
    'body': '''
    class ${1:classname}(BaseController):
        def receivable_methods(self):
            return [${2:"GET"}]

        def get_processor_cls(self):
            from ${3:processor_from} import ${4:processor}
            return ${4:processor}
    ${5:valuename} = ${1:classname}()
    '''
  '[Tyrus]Api Controller':
    'prefix': 'cona'
    'body': '''
    class ${1:classname}(BaseApiController):
        def receivable_methods(self):
            return [${2:"GET"}]

        def get_processor_cls(self):
            from ${3:processor_from} import ${4:processor}
            return ${4:processor}
    ${5:valuename} = ${1:classname}()
    '''
  '[Tyrus]Processor':
    'prefix': 'pro'
    'body': '''
    class ${1:classname}(IProcessor):
        render_template = "${2:template}.html"
        render_values = dict()

        def can_process(self):
            return True, None

        def process(self):
            self.render_values.update(dict())
    '''
