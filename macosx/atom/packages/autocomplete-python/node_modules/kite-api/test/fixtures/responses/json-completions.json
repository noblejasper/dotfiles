{
  "completions":[
    {
      "display":"dumps",
      "insert":"dumps",
      "hint":"function",
      "documentation_text":"Serialize obj to a JSON formatted str using this conversion table . If ensure_ascii is False , the result may contain non-ASCII characters and the return value may be a unicode instance.\n\nThe arguments have the same meaning as in dump() ( #json.dump ) .\n\nNote\n\nKeys in key/value pairs of JSON are always of the type str . When a dictionary is converted into JSON, all the keys of the dictionary are coerced to strings. As a result of this, if a dictionary is converted into JSON and then back into a dictionary,",
      "documentation_html":"",
      "symbol":{
        "id":"python;json.dumps",
        "name":"dumps",
        "namespace":{
          "id":"python;json",
          "kind":"module",
          "repr":"json",
          "type":"",
          "type_id":""
        },
        "value":[
          {
            "id":"python;json.dumps",
            "kind":"function",
            "repr":"json.dumps",
            "type":"",
            "type_id":""
          }
        ]
      }
    },
    {
      "display":"loads",
      "insert":"loads",
      "hint":"function",
      "documentation_text":"Deserialize s (a str or unicode instance containing a JSON document) to a Python object using this conversion table .\n\nIf s is a str instance and is encoded with an ASCII based encoding other than UTF-8 (e.g. latin-1), then an appropriate encoding name must be specified. Encodings that are not ASCII based (such as UCS-2) are not allowed and should be decoded to unicode first.\n\nThe other arguments have the same meaning as in load() ( #json.load ) .",
      "documentation_html":"",
      "symbol":{
        "id":"python;json.loads",
        "name":"loads",
        "namespace":{
          "id":"python;json",
          "kind":"module",
          "repr":"json",
          "type":"",
          "type_id":""
        },
        "value":[
          {
            "id":"python;json.loads",
            "kind":"function",
            "repr":"json.loads",
            "type":"",
            "type_id":""
          }
        ]
      }
    },
    {
      "display":"load",
      "insert":"load",
      "hint":"function",
      "documentation_text":"Deserialize fp (a .read() -supporting file-like object containing a JSON document) to a Python object using this conversion table .\n\nIf the contents of fp are encoded with an ASCII based encoding other than UTF-8 (e.g. latin-1), then an appropriate encoding name must be specified. Encodings that are not ASCII based (such as UCS-2) are not allowed, and should be wrapped with codecs.getreader(encoding)(fp) , or simply decoded to a unicode object and passed to loads() ( #json.loads ) .\n\nobject_hook",
      "documentation_html":"",
      "symbol":{
        "id":"python;json.load",
        "name":"load",
        "namespace":{
          "id":"python;json",
          "kind":"module",
          "repr":"json",
          "type":"",
          "type_id":""
        },
        "value":[
          {
            "id":"python;json.load",
            "kind":"function",
            "repr":"json.load",
            "type":"",
            "type_id":""
          }
        ]
      }
    },
    {
      "display":"dump",
      "insert":"dump",
      "hint":"function",
      "documentation_text":"Serialize obj as a JSON formatted stream to fp (a .write() -supporting file-like object ) using this conversion table .\n\nIf skipkeys is True (default: False ), then dict keys that are not of a basic type ( str , unicode , int , long , float , bool , None ) will be skipped instead of raising a TypeError ( #exceptions.TypeError ) .\n\nIf ensure_ascii is True (the default), all non-ASCII characters in the output are escaped with \\uXXXX sequences, and the result is a str instance consisting of ASCII characters",
      "documentation_html":"",
      "symbol":{
        "id":"python;json.dump",
        "name":"dump",
        "namespace":{
          "id":"python;json",
          "kind":"module",
          "repr":"json",
          "type":"",
          "type_id":""
        },
        "value":[
          {
            "id":"python;json.dump",
            "kind":"function",
            "repr":"json.dump",
            "type":"",
            "type_id":""
          }
        ]
      }
    },
    {
      "display":"encoder",
      "insert":"encoder",
      "hint":"module",
      "documentation_text":"Implementation of JSONEncoder",
      "documentation_html":"",
      "symbol":{
        "id":"python;json.encoder",
        "name":"encoder",
        "namespace":{
          "id":"python;json",
          "kind":"module",
          "repr":"json",
          "type":"",
          "type_id":""
        },
        "value":[
          {
            "id":"python;json.encoder",
            "kind":"module",
            "repr":"json.encoder",
            "type":"",
            "type_id":""
          }
        ]
      }
    },
    {
      "display":"decoder",
      "insert":"decoder",
      "hint":"module",
      "documentation_text":"Implementation of JSONDecoder",
      "documentation_html":"",
      "symbol":{
        "id":"python;json.decoder",
        "name":"decoder",
        "namespace":{
          "id":"python;json",
          "kind":"module",
          "repr":"json",
          "type":"",
          "type_id":""
        },
        "value":[
          {
            "id":"python;json.decoder",
            "kind":"module",
            "repr":"json.decoder",
            "type":"",
            "type_id":""
          }
        ]
      }
    },
    {
      "display":"JSONEncoder",
      "insert":"JSONEncoder",
      "hint":"type",
      "documentation_text":"Extensible JSON encoder for Python data structures.\n\nSupports the following objects and types by default:\n\nPython JSON\ndict object\nlist, tuple array\nstr, unicode string\nint, long, float number\nTrue true\nFalse false\nNone null\n\nTo extend this to recognize other objects, subclass and implement a default() ( #json.JSONEncoder.default ) method with another method that returns a serializable object for o if possible, otherwise it should call the superclass implementation (to raise TypeError ( #exceptions.TypeError",
      "documentation_html":"",
      "symbol":{
        "id":"python;json.JSONEncoder",
        "name":"JSONEncoder",
        "namespace":{
          "id":"python;json",
          "kind":"module",
          "repr":"json",
          "type":"",
          "type_id":""
        },
        "value":[
          {
            "id":"python;json.encoder.JSONEncoder",
            "kind":"type",
            "repr":"json.encoder.JSONEncoder",
            "type":"type",
            "type_id":"python;__builtin__.type"
          },
          {
            "id":"python;json.encoder.JSONEncoder",
            "kind":"type",
            "repr":"json.encoder.JSONEncoder",
            "type":"type",
            "type_id":"python;builtins.type"
          }
        ]
      }
    },
    {
      "display":"JSONDecoder",
      "insert":"JSONDecoder",
      "hint":"type",
      "documentation_text":"Simple JSON decoder.\n\nPerforms the following translations in decoding by default:\n\nJSON Python\nobject dict\narray list\nstring unicode\nnumber (int) int, long\nnumber (real) float\ntrue True\nfalse False\nnull None\n\nIt also understands NaN , Infinity , and -Infinity as their corresponding float values, which is outside the JSON spec.\n\nencoding determines the encoding used to interpret any str objects decoded by this instance (UTF-8 by default). It has no effect when decoding unicode objects.\n\nNote that",
      "documentation_html":"",
      "symbol":{
        "id":"python;json.JSONDecoder",
        "name":"JSONDecoder",
        "namespace":{
          "id":"python;json",
          "kind":"module",
          "repr":"json",
          "type":"",
          "type_id":""
        },
        "value":[
          {
            "id":"python;json.decoder.JSONDecoder",
            "kind":"type",
            "repr":"json.decoder.JSONDecoder",
            "type":"type",
            "type_id":"python;__builtin__.type"
          },
          {
            "id":"python;json.decoder.JSONDecoder",
            "kind":"type",
            "repr":"json.decoder.JSONDecoder",
            "type":"type",
            "type_id":"python;builtins.type"
          }
        ]
      }
    },
    {
      "display":"scanner",
      "insert":"scanner",
      "hint":"module",
      "documentation_text":"JSON token scanner",
      "documentation_html":"",
      "symbol":{
        "id":"python;json.scanner",
        "name":"scanner",
        "namespace":{
          "id":"python;json",
          "kind":"module",
          "repr":"json",
          "type":"",
          "type_id":""
        },
        "value":[
          {
            "id":"python;json.scanner",
            "kind":"module",
            "repr":"json.scanner",
            "type":"",
            "type_id":""
          }
        ]
      }
    },
    {
      "display":"_default_encoder",
      "insert":"_default_encoder",
      "hint":"json.encoder.JSONEncoder",
      "documentation_text":"No documentation available",
      "documentation_html":"",
      "symbol":{
        "id":"python;json._default_encoder",
        "name":"_default_encoder",
        "namespace":{
          "id":"python;json",
          "kind":"module",
          "repr":"json",
          "type":"",
          "type_id":""
        },
        "value":[
          {
            "id":"python;json._default_encoder",
            "kind":"instance",
            "repr":"json._default_encoder",
            "type":"JSONEncoder",
            "type_id":"python;json.encoder.JSONEncoder"
          }
        ]
      }
    },
    {
      "display":"_default_decoder",
      "insert":"_default_decoder",
      "hint":"json.decoder.JSONDecoder",
      "documentation_text":"No documentation available",
      "documentation_html":"",
      "symbol":{
        "id":"python;json._default_decoder",
        "name":"_default_decoder",
        "namespace":{
          "id":"python;json",
          "kind":"module",
          "repr":"json",
          "type":"",
          "type_id":""
        },
        "value":[
          {
            "id":"python;json._default_decoder",
            "kind":"instance",
            "repr":"json._default_decoder",
            "type":"JSONDecoder",
            "type_id":"python;json.decoder.JSONDecoder"
          }
        ]
      }
    },
    {
      "display":"tool",
      "insert":"tool",
      "hint":"module",
      "documentation_text":"Command-line tool to validate and pretty-print JSON\n\nUsage:\n\n$ echo '{\"json\":\"obj\"}' | python -m json.tool { \"json\": \"obj\" } $ echo '{ 1.2:3.4}' | python -m json.tool Expecting property name enclosed in double quotes: line 1 column 3 (char 2)",
      "documentation_html":"",
      "symbol":{
        "id":"python;json.tool",
        "name":"tool",
        "namespace":{
          "id":"python;json",
          "kind":"module",
          "repr":"json",
          "type":"",
          "type_id":""
        },
        "value":[
          {
            "id":"python;json.tool",
            "kind":"module",
            "repr":"json.tool",
            "type":"",
            "type_id":""
          }
        ]
      }
    }
  ]
}
